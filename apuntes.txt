APUNTES DEL CURSO DE ANGULAR

Para iniciar el proyecto devemos intalar nodeJS, TypeScript, Angular CLI
Una vez instalado esos programas podemos crear un nuevo proyecto con el comando,

    ng new nombreProyecto

luego nos ubicamos en la carpeta del proyecto usando,

    cd nombreProyecto

e iniciamos el servidor con,

    ng serve

esto compila todo nuestro proyecto y actualiza los cambios en tiempo real.


Angular es caracterisa por trabajar con componentes que son como widgets para seccionar el contenido de la pagina web, cada componente cuenta con su html,css,javaScript.

Como dejimos anterior mente el componente cuenta con 3 archivos nombre.componet.html, nombre.component.ts y nombre.component.css
Estos archivos suelen seguir estas extenciones en los nombres para saber que contenido hay detro de cada uno.
En el archivo xxx.component.html se agrega la vista del componente (el codigo html).

En el archivo xxx.component.ts se agrega la logica del componente (se usa lenguaje TypeScript).
En esencia un componente es una clase que puede tener propiedades y metodos que nos sirvan para constuir el tamplate (archivo html) del componente.
Las propiedades son como variables y se construyen de la siguiente forma, "alcance nombreVariable : tipoVariable = valor;" asignar un valor inicial es opcional.
Ej: public name : string = 'Victor';
    public edad : number;
    public trueOrFalse : boolean = true;

Los metodos son como funciones y se construyen de la siguiente forma, nombreMedtodo(parametros) : tipo de dato {logica}" los parametros son opcionales, dependeran de si son requeridos para la logica. El tipo de dato solo se agrega si este metodo retorna algun valor.
Ej: getEdadNombre() : string {
    return "${this.name} : ${this.edad}";
}

ngOnInit es un metodo de Angular el cual sirve para inicializar valores de propiedades, es recomendarlo usarlo en lugar del constructor y se usa de la siguiente manera.
Ej:
ngOnInit(){
    this.name = 'Victor del Carpio';
    this.edad = 24;    
}
Todo estos elementos van en el archivo xxx.component.ts.

Por ultimo en el archivo xxx.component.css se agregan los estilos del componente (obviamente en lenguaje css). 
Algo interesante de este archivo es que todas las reglas que aqui se encuentran solo tendran alcance al componente al cual pertenece por lo cual no afectaran a otros componentes.
Angular cuenta con algunos selectores especiales como:
    :host{    
    } (actua sobre la etiqueta del componente, por lo cual afecta a todos los elementos dentro del componente)
    :host-context(.otroSelector){        
    }(actua sobre el padre o ancestro del componente)

Para crear un componente usamos el comando,

    ng g c nombreComponente

este omando me crea automaticamente los 3 archivos menciondos anteriormente (nombre.componet.html, nombre.component.ts y nombre.component.css) ademas de importar el componente en el archivo app.module.ts para que el componente este listo para usar.


NG-CONTENT
ng-content es una etiqueta utilizada en el archivo nombre1.component.html para mostrar las etiquetas o componentes hijos de nombres1 en el archivo app.component.html


La siguiente linea se puede utilizar para cambiar una propiedad despues de un tiempo especifico
    setTimeout(()=> this.name = 'Victor', 3000) /* tiempo en milisegundos */
    setTimeout(()=> this.trueOrFalse = false, 5000)
Estas sentencias se escriben dentro de ngOnInit en el archivo xxx.componet.ts

ngClass ver USage notes en el siguiente enlace
https://angular.io/api/common/NgClass


*NGIF
*ngIf sirve para mostrar o no un elemento, si la prueba logica devuelve true se mostrara si devuelve false no aparecera el elemento, tambien podemos hacer uso del else para mostrar otro elemento en caso de que devuelva falso.
La prueba logica se puede remplazar por las palabras true or false o por una variable boolean.
Ej 1:<p *ngIf="prueba logica">Esto se mostrara si se cumple la prueba logica</>

Ej 2:<p *ngIf="prueba logica; else loquesea">Esto se mostrara si se cumple la prueba logica</p>
    <ng-template #loquesea>
        <p>Esto se mostrara si NO se cumple la prueba logica</p>
    </ng-template>
En el segundo ejemplo podemos ver el uso del else y como debemos usar <ng-template> para que funcione.

Para instalar FONT-AWESOME debemos usar el comando "npm install font-awesome" y agregar en el archivo "angular.json" dentro del array styles la siguiente ruta ../node_module/font-awesome/css/font-awesome.css (de igual forma podemos instalar bootstrap usando npm install bootstrap)

*NGFOR
*ngFor se utiliza para la creacion de tablas o listas donde se repiten varios elementos iguales como <li> o <tr>
    <ul >
        <li  *ngFor="let item of array; index as i">
            {{i}}{{item}}
        </li>
    </ul>
array es un arreglo que se define en el xxx.component.ts de esta forma item va tomando un valor de ese array en cada iteracion.

*NGSWITCH
*ngSwitch se usa para mostrar un solo bloque de varios casos, es equivalente a usar varios ngIf
    <div [ngSwitch]="category">
        <p *ngSwitchCase="'web'"> Opcion web</p>
        <p *ngSwitchCase="'movil'"> Opcion movil</p>
        <p *ngSwitchCase="'otra'"> Opcion otra</p>
        <p *ngSwitchDefault> Opcion no especificada</p>
    </div>
dependiendo del valor de la variable category se mostrara uno solo de los parrafos, si es web, movil, otra se mostrara el parrafo conrespondiente, en caso de que category no tenga valor o tenga otro valor se mostrara la opcion default 

EVENTOS
Click
Es el evento mas comun el cual define una accion cuando se hace click en el elemento donde se puso el evento,
    <a (click)="moreInformation=!moreInformation">Mas Informacion</a>
tambien se puede pasar un metodo el cual se crearia en el archivo xxx.component.ts por ejemplo,
    cambioMasInfo(){
        this.moreInformation = !this.moreInformation;
    }
y el elemento quedaria asi,
    <a (click)="cambioMasInfo()">Mas Informacion</a>
Change
Detecta cualquier cambio en un campo de un formulario
    <input type="text" (change)="nombre = $event.target.value">
tambien se le puede mandar un metodo,
    <input type="text" (change)= "cambioNombre($event)">
    cambioNombre(event : any){
        this.nombre = event.target.value;
    }
La variable $event ya viene definida lista para usar


ngModel
Sirve para sincronizar a 2 vias, se pone en un input con el nombre de la propiedad que quieres sincronizar
    <input type="text" [(ngModel)]="apellido">


PIPES
Sirven para cambiar el formato de ciertos valores como fechas o monedas, el operado del pipe es el simbolo | 
Ver https://angular.io/guide/pipes.


DIRECTIVES
Sirven para cambiar el DOM de los elementos, principalmente stylos o clases. 
Ver https://angular.io/guide/attribute-directives.


HOSTLISTENER
Sirven para aplicar los directives cuando ocurre un evento (click, mouseover, mouseout... ver el dom de js para mas eventos).


SERVICE
Sirven para hacer consultas y almacenar informacion ya que los componentes no deben hacer esto, otra caracteristica importante es que cada servicio tiene un solo objeto por lo cual si algun componente modifica este objeto todos los demas componentes que usen el servicio veran al objeto modificado. De ese modo los servicios permiten comunicacion entre los componentes.
Para crear un servicio usamos el comando
    ng g s nombreServicio
nos creara 2 archivos, nombreServicio.service.ts y nombreServicio.service.spec.ts, este ultimo lo podemos eliminar.
/* Apartir de angular 6 ya no es necesario hacer esto => Luego debemos importar la clase al archivo app.module.ts y agregarla a los providers en el mismo archivo. */
Finalmente para utilizarla debemos importar el servicio al componente donde lo vayamos a usar y creamos una variable con esa clase dentro del constructor del componente quedaria algo como esto
    constructor(private nombrevariableS : ArticulosService){

    }

Una de las funciones mas comunes de un servicio es realizar consultas http es decir en internet, para eso debemos importar HttpClientModule de @angular/common/http y agregarlo a los imports en el archivo app.module.ts. Tambien debemos importar HttpClient al servicio que hara la consulta a internet.
Luego en el constructor del servicio crearemos una variable de esta clase HttpClient de la siguiente manera.
    constructor(private httpVAR : HttpClient){

    }
Ahora podemos seguirconfigurando el servicio, por ejemplo podemos agregar un metodo getAll() que obtenga de internet todos los articulos.
    getAll(){
        this.httpVAR.get('').subscribe(data => {console.log(data);})
    }
el metodo get('url') obtiene informacion de dicha url y es un metodo de la clase HttpClient,  este metodo get retorna un observador (aun no hemos trabajado con observadores pero de momento para ver la informacion lo haremos con el .subscribe...)
Este servicio articulos lo usaremos en el componente articulos.


OBSERVADORES Y OBSERVABLES
Los observables son datos que se reciben por el o los observadores cada vez que este observable se actualice o recargue el observador recibira la neva informacion y se volvera a ejecutar.
Por lo general los observables los obtendremos de una fuente como una base de datos o http tambien los podemos crear pero es algo poco comun.
La parte importante de este tema es los observadores que deben subscribirse a los observables para asi reaccionar a ellos, esto se hace mediante el metodo subscribe().
    observable.subscribe((data) => {

    })
"data" es la informacion que envia el observable, y entre las llaves va lo que hara el observador cada vez que reciba data.


OPERADORES RXJS
Son operadores que se aplican a los observables para modificarlos, se pueden ver la lista de operadores en http://reactivex.io/documentation/operators.html.
uno de los mas comunes es map en el siguiente ejemplo lo usaremos para modificar un arreglo
    para usar cualquier operador debemos importarlo en el servicio para ello usamos la siguiente linea
        import { nombreOperador } 'rxjs/operators';
    por lo cual el ejemplo de map queadria asi
        import { map } from 'rxjs/operators';

        observable.pipe(map(data => {return data[0]})).subscribe(data => {console.log(data)})

    El o los operadores debe ir dentro de la funcion pipe() que tambien es un metodo de rxjs. en el ejemplo anterior nos muestra solo el primer articulo (el que esta en la posicion 0 del array), si queremos que nos muestre todos podriamos hacer.
        getAll(){
            observable.pipe(map(data => {return data})).subscribe(data => {console.log(data)})
        }


ASYNC PIPE "| async"
Sirve para mostrar informacion asincrona, ya sea de un observable o de una promesa, lo que hace es suscribirse a ese observable o promesa y mostrar el ultimo valor enviado.
una forma de utilizarlo es con los ciclos ngFor de la siguiente manera.
    <li *ngFor="let repo of articulosS.repoObserver | async">{{repo.name}}</li>


OPERADOR DE NAVEGACION SEGURA "?"
Al intentar acceder a los metodos o propiedades de un objeto con valor nulo nos da un error y puede hacer fallar nuestra pagina web, con el operador ? se valida que el objeto a la izquierda no sea nulo antes de acceder a la propiedad o el metodo deseado.
Es muy usado en programacion asincrona ya que por lo general empieza con valor nulo y despues se actualiza el valor.
Ej:
    <li *ngFor="let repo of articulosS.repoObserver | async">{{repo?.name}}</li>


ANIMATIONS
Para usar animaciones debemos importar BrowserAnimationsModule from @angular/platform-browser/animations ya gregar la clase a los imports en el archivo app.module.ts tambien debemos revisar que en el archivo package.json tengamos en dependencies @angular/animations : version, de no ser asi usamos en la terminal npm intall @angular/animations.


BUILD DE PRODUCCION
Una vez la aplicacion este lista ejecutamos el comando
    ng build --prod
esto nos mostrara si tenemos algun error en la aplicacion, el cual deberemos corregir antes de continuar, una vez el comando no nos de ningun error se creara una carpeta dist en la cual tiene el contenido que subiremos al host.
otra cosa importantes es que las imagenes que se utilisen debe estar en la carpera assets que esta dentro de la carpeta src ya que esta carpeta se copiara en el dist cuando se haga el build.